// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	SessionTokenScopes = "sessionToken.Scopes"
)

// Defines values for ConfirmationTypeV1.
const (
	CareteamInvitation  ConfirmationTypeV1 = "careteam_invitation"
	ClinicianInvitation ConfirmationTypeV1 = "clinician_invitation"
	NoAccount           ConfirmationTypeV1 = "no_account"
	PasswordReset       ConfirmationTypeV1 = "password_reset"
	SignupConfirmation  ConfirmationTypeV1 = "signup_confirmation"
)

// Defines values for StatusV1.
const (
	Canceled  StatusV1 = "canceled"
	Completed StatusV1 = "completed"
	Declined  StatusV1 = "declined"
	Pending   StatusV1 = "pending"
)

// Defines values for UnitsmgdlV1.
const (
	MgdL UnitsmgdlV1 = "mg/dL"
	Mgdl UnitsmgdlV1 = "mg/dl"
)

// Defines values for UnitsmmolV1.
const (
	MmolL UnitsmmolV1 = "mmol/L"
	Mmoll UnitsmmolV1 = "mmol/l"
)

// AcceptanceV1 defines model for acceptance.v1.
type AcceptanceV1 struct {
	Birthday BirthdayV1 `json:"birthday"`

	// Password Password
	Password PasswordV1 `json:"password"`
}

// AlertsconfigV1 Configuration for alerts triggered in response to the status of a user's device and data.
type AlertsconfigV1 struct {
	High *struct {
		// Delay Duration in minutes to wait before alerting.
		Delay *int `json:"delay,omitempty"`

		// Enabled A toggle for disabling the alert.
		Enabled *bool `json:"enabled,omitempty"`

		// Repeat Duration in minutes, after which an alert will be repeated.
		// A value of 0 disables the repeat functionality.
		Repeat *int `json:"repeat,omitempty"`

		// Threshold Blood glucose value, in `mg/dL` or `mmol/L`
		Threshold GlucoseV1 `json:"threshold"`
	} `json:"high,omitempty"`
	Low *struct {
		// Delay Duration in minutes to wait before alerting.
		Delay *int `json:"delay,omitempty"`

		// Enabled A toggle for disabling the alert.
		Enabled *bool `json:"enabled,omitempty"`

		// Repeat Duration in minutes, after which an alert will be repeated.
		// A value of 0 disables the repeat functionality.
		Repeat *int `json:"repeat,omitempty"`

		// Threshold Blood glucose value, in `mg/dL` or `mmol/L`
		Threshold GlucoseV1 `json:"threshold"`
	} `json:"low,omitempty"`
	NoCommunication *struct {
		// Delay Duration in minutes to wait before alerting.
		Delay *int `json:"delay,omitempty"`

		// Enabled A toggle for disabling the alert.
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"noCommunication,omitempty"`
	NotLooping *struct {
		// Delay Duration in minutes to wait before alerting.
		Delay *int `json:"delay,omitempty"`

		// Enabled A toggle for disabling the alert.
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"notLooping,omitempty"`
	UrgentLow *struct {
		// Enabled A toggle for disabling the alert.
		Enabled *bool `json:"enabled,omitempty"`

		// Threshold Blood glucose value, in `mg/dL` or `mmol/L`
		Threshold GlucoseV1 `json:"threshold"`
	} `json:"urgentLow,omitempty"`
}

// BaseV1 defines model for base.v1.
type BaseV1 struct {
	// Enabled A toggle for disabling the alert.
	Enabled *bool `json:"enabled,omitempty"`
}

// BirthdayV1 defines model for birthday.v1.
type BirthdayV1 = string

// ClinicIdV1 Clinic identifier.
type ClinicIdV1 = string

// ConfirmationTypeV1 defines model for confirmation-type.v1.
type ConfirmationTypeV1 string

// ConfirmationV1 defines model for confirmation.v1.
type ConfirmationV1 struct {
	Context *string `json:"context,omitempty"`

	// Created [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	Created DatetimeV1 `json:"created"`
	Creator *CreatorV1 `json:"creator,omitempty"`

	// CreatorId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	CreatorId *Tidepooluserid `json:"creatorId,omitempty"`

	// Email An email address, as specified by [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322).
	Email EmailaddressV1 `json:"email"`

	// ExpiresAt If specified, the invitation will expire at the given date and time.
	ExpiresAt *ExpiresAtV1 `json:"expiresAt,omitempty"`
	Key       KeyV1        `json:"key"`

	// Modified [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	Modified     *DatetimeV1        `json:"modified,omitempty"`
	Restrictions *RestrictionsV1    `json:"restrictions,omitempty"`
	Status       StatusV1           `json:"status"`
	Type         ConfirmationTypeV1 `json:"type"`
}

// CreatorV1 defines model for creator.v1.
type CreatorV1 struct {
	Profile CreatorprofileV1 `json:"profile"`

	// Userid String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	Userid *Tidepooluserid `json:"userid,omitempty"`
}

// CreatorprofileV1 defines model for creatorprofile.v1.
type CreatorprofileV1 struct {
	FullName string           `json:"fullName"`
	Patient  PatientprofileV1 `json:"patient"`
}

// DatetimeV1 [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
type DatetimeV1 = string

// DelayV1 defines model for delay.v1.
type DelayV1 struct {
	// Delay Duration in minutes to wait before alerting.
	Delay *int `json:"delay,omitempty"`
}

// DiagnosisdateV1 defines model for diagnosisdate.v1.
type DiagnosisdateV1 = string

// EmailaddressV1 An email address, as specified by [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322).
type EmailaddressV1 = string

// ErrorV1 Error response.
type ErrorV1 struct {
	Code   int32  `json:"code"`
	Error  *int   `json:"error,omitempty"`
	Reason string `json:"reason"`
}

// ExpiresAtV1 If specified, the invitation will expire at the given date and time.
type ExpiresAtV1 = time.Time

// GlucoseV1 Blood glucose value, in `mg/dL` or `mmol/L`
type GlucoseV1 struct {
	union json.RawMessage
}

// GlucosemgdlV1 Blood glucose value, in `mg/dL`
type GlucosemgdlV1 struct {
	Units UnitsmgdlV1 `json:"units"`

	// Value An integer value representing a `mg/dL` value.
	Value ValuemgdlV1 `json:"value"`
}

// GlucosemmolV1 Blood glucose value, in `mmol/L`
type GlucosemmolV1 struct {
	Units UnitsmmolV1 `json:"units"`

	// Value A floating point value representing a `mmol/L` value.
	Value ValuemmolV1 `json:"value"`
}

// GlucosethresholdV1 defines model for glucosethreshold.v1.
type GlucosethresholdV1 struct {
	// Threshold Blood glucose value, in `mg/dL` or `mmol/L`
	Threshold GlucoseV1 `json:"threshold"`
}

// InvitationV1 defines model for invitation.v1.
type InvitationV1 struct {
	// AlertsConfig Configuration for alerts triggered in response to the status of a user's device and data.
	AlertsConfig *AlertsconfigV1 `json:"alertsConfig,omitempty"`

	// Email An email address, as specified by [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322).
	Email EmailaddressV1 `json:"email"`

	// Nickname A user-friendly name for the recipient of the invitation.
	Nickname    *string `json:"nickname,omitempty"`
	Permissions struct {
		Note   *map[string]interface{} `json:"note,omitempty"`
		Upload *map[string]interface{} `json:"upload,omitempty"`
		View   *map[string]interface{} `json:"view,omitempty"`
	} `json:"permissions"`
}

// KeyV1 defines model for key.v1.
type KeyV1 = string

// ListV1 defines model for list.v1.
type ListV1 = []ConfirmationV1

// LookupV1 defines model for lookup.v1.
type LookupV1 struct {
	Key KeyV1 `json:"key"`
}

// PasswordV1 Password
type PasswordV1 = string

// PatientprofileV1 defines model for patientprofile.v1.
type PatientprofileV1 struct {
	Birthday      *BirthdayV1      `json:"birthday,omitempty"`
	DiagnosisDate *DiagnosisdateV1 `json:"diagnosisDate,omitempty"`
	FullName      *string          `json:"fullName,omitempty"`
	IsOtherPerson *bool            `json:"isOtherPerson,omitempty"`
}

// RepeatV1 defines model for repeat.v1.
type RepeatV1 struct {
	// Repeat Duration in minutes, after which an alert will be repeated.
	// A value of 0 disables the repeat functionality.
	Repeat *int `json:"repeat,omitempty"`
}

// RestrictionsV1 defines model for restrictions.v1.
type RestrictionsV1 struct {
	// CanAccept Whether the invite can be accepted by the current user
	CanAccept bool `json:"canAccept"`

	// RequiredIdp Set if the user must be authenticated against a specific identity provider before they are able to accept the invite
	RequiredIdp *string `json:"requiredIdp,omitempty"`
}

// StatusV1 defines model for status.v1.
type StatusV1 string

// Tidepooluserid String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type Tidepooluserid = string

// UnitsmgdlV1 defines model for unitsmgdl.v1.
type UnitsmgdlV1 string

// UnitsmmolV1 defines model for unitsmmol.v1.
type UnitsmmolV1 string

// UpsertV1 defines model for upsert.v1.
type UpsertV1 struct {
	// ClinicId Clinic identifier.
	ClinicId *ClinicIdV1 `json:"clinicId,omitempty"`

	// InvitedBy String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	InvitedBy *Tidepooluserid `json:"invitedBy,omitempty"`
}

// ValuemgdlV1 An integer value representing a `mg/dL` value.
type ValuemgdlV1 = int32

// ValuemmolV1 A floating point value representing a `mmol/L` value.
type ValuemmolV1 = float32

// EmailV1 An email address, as specified by [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322).
type EmailV1 = EmailaddressV1

// InvitedbyemailV1 An email address, as specified by [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322).
type InvitedbyemailV1 = EmailaddressV1

// InvitedbyuserV1 String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type InvitedbyuserV1 = Tidepooluserid

// Confirmation defines model for Confirmation.
type Confirmation = ConfirmationV1

// ConfirmationError Error response.
type ConfirmationError = ErrorV1

// ConfirmationList defines model for ConfirmationList.
type ConfirmationList = ListV1

// ConfirmationLookup defines model for ConfirmationLookup.
type ConfirmationLookup = LookupV1

// ConfirmationUpsert defines model for ConfirmationUpsert.
type ConfirmationUpsert = UpsertV1

// AcceptPasswordChangeJSONRequestBody defines body for AcceptPasswordChange for application/json ContentType.
type AcceptPasswordChangeJSONRequestBody = PasswordV1

// AcceptCareTeamInviteJSONRequestBody defines body for AcceptCareTeamInvite for application/json ContentType.
type AcceptCareTeamInviteJSONRequestBody = LookupV1

// ConfirmAccountSignupJSONRequestBody defines body for ConfirmAccountSignup for application/json ContentType.
type ConfirmAccountSignupJSONRequestBody = AcceptanceV1

// DismissInviteJSONRequestBody defines body for DismissInvite for application/json ContentType.
type DismissInviteJSONRequestBody = LookupV1

// DismissAccountSignupJSONRequestBody defines body for DismissAccountSignup for application/json ContentType.
type DismissAccountSignupJSONRequestBody = LookupV1

// SendCareTeamInviteJSONRequestBody defines body for SendCareTeamInvite for application/json ContentType.
type SendCareTeamInviteJSONRequestBody = InvitationV1

// SendAccountSignupConfirmationJSONRequestBody defines body for SendAccountSignupConfirmation for application/json ContentType.
type SendAccountSignupConfirmationJSONRequestBody = UpsertV1

// UpsertAccountSignupConfirmationJSONRequestBody defines body for UpsertAccountSignupConfirmation for application/json ContentType.
type UpsertAccountSignupConfirmationJSONRequestBody = UpsertV1

// CancelAccountSignupConfirmationJSONRequestBody defines body for CancelAccountSignupConfirmation for application/json ContentType.
type CancelAccountSignupConfirmationJSONRequestBody = LookupV1

// AsGlucosemgdlV1 returns the union data inside the GlucoseV1 as a GlucosemgdlV1
func (t GlucoseV1) AsGlucosemgdlV1() (GlucosemgdlV1, error) {
	var body GlucosemgdlV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGlucosemgdlV1 overwrites any union data inside the GlucoseV1 as the provided GlucosemgdlV1
func (t *GlucoseV1) FromGlucosemgdlV1(v GlucosemgdlV1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGlucosemgdlV1 performs a merge with any union data inside the GlucoseV1, using the provided GlucosemgdlV1
func (t *GlucoseV1) MergeGlucosemgdlV1(v GlucosemgdlV1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGlucosemmolV1 returns the union data inside the GlucoseV1 as a GlucosemmolV1
func (t GlucoseV1) AsGlucosemmolV1() (GlucosemmolV1, error) {
	var body GlucosemmolV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGlucosemmolV1 overwrites any union data inside the GlucoseV1 as the provided GlucosemmolV1
func (t *GlucoseV1) FromGlucosemmolV1(v GlucosemmolV1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGlucosemmolV1 performs a merge with any union data inside the GlucoseV1, using the provided GlucosemmolV1
func (t *GlucoseV1) MergeGlucosemmolV1(v GlucosemmolV1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GlucoseV1) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GlucoseV1) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
